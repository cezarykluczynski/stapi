import com.github.spotbugs.snom.SpotBugsTask
import groovy.io.FileType

buildscript {
	repositories {
		mavenCentral()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath group: 'org.zeroturnaround', name: 'zt-zip', version: ztZipVersion
		classpath group: 'org.apache.commons', name: 'commons-lang3', version: commonsLangVersion
		classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.13"
		classpath group: 'org.apache.groovy', name: 'groovy', version: '4.0.4'
	}
}

plugins {
	id 'java'
	id 'io.freefair.lombok' version '6.6.1' apply false
	id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
	id 'com.yupzip.wsdl2java' version '2.3.2' apply false
	id "com.github.ben-manes.versions" version "0.44.0"
	id "io.spring.dependency-management" version "1.1.0"
}

allprojects {
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'jacoco'
	apply plugin: 'checkstyle'
	apply plugin: 'codenarc'
	apply plugin: 'com.github.spotbugs'

	compileJava.options.encoding = 'UTF-8'

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	tasks.withType(GroovyCompile) {
		groovyOptions.encoding = 'UTF-8'
	}

	tasks.withType(SpotBugsTask) {
		reports {
			html {
				required = true
				outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
				stylesheet = 'fancy-hist.xsl'
			}
		}
	}

	repositories {
		mavenCentral()
	}

	configurations.all {
		resolutionStrategy {
			// version 4.0.0 is compiled with Java 11,
			// and it generated SOAP classes with Jakarta packages,
			// so we keep version 3.x for Java 8 client compatibility
			force "org.apache.cxf:cxf-tools-wsdlto-core:$apacheCxfVersionLegacy"
			force "org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:$apacheCxfVersionLegacy"
			force "org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:$apacheCxfVersionLegacy"
			// for Java 17 compatibility
			force group: 'org.apache.ws.xmlschema', name: 'xmlschema-core', version: '2.3.0'
			// multiple versions
			force 'ch.qos.logback:logback-core:1.4.5'
			force 'ch.qos.logback:logback-classic:1.4.5'
			// multiple versions
			force "org.springframework.data:spring-data-jpa:$springDataVersion"
			// multiple versions
			force "net.bytebuddy:byte-buddy:$byteBuddyVersion"
		}
	}

	dependencies {
		implementation group: 'jakarta.platform', name: 'jakarta.jakartaee-web-api', version: '10.0.0'

		// Utils
		implementation group: 'org.json', name: 'json', version: '20220924'
		implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
		implementation group: 'org.apache.commons', name: 'commons-lang3', version: commonsLangVersion
		implementation group: 'commons-validator', name: 'commons-validator', version: '1.7'
		implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
		implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
		implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
		implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.7.3'

		// Testing
		testImplementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
		testImplementation group: 'org.apache.groovy', name: 'groovy', version: '4.0.4'
		testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.3-groovy-4.0'
		testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: byteBuddyVersion
		testImplementation group: 'cglib', name: 'cglib-nodep', version: '3.3.0'
		testImplementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.24.10'
		testImplementation group: 'org.objenesis', name: 'objenesis', version: '3.3'
	}

	test {
		useJUnitPlatform()
		exclude '**/*IntegrationTest*'
		maxParallelForks = 1
	}

	checkstyle {
		toolVersion = '9.3'
	}

	codenarc {
		configFile = "$rootDir/codenarc.groovy" as File
		toolVersion = '3.1.0'
	}

	checkstyleMain {
		configProperties = [
				'baseDir': "$rootDir"
		]
	}

	spotbugs {
		toolVersion = '4.7.3'
		excludeFilter.set(file("$rootProject.projectDir/spotbugs-filter-exclude.xml"))
	}

	task cleanMetamodel(type: CleanMetamodel) {}

	clean {
		dependsOn cleanMetamodel
	}

	assemble.doFirst {
		def customProperties = 'application-stapi-custom.properties'
		File file = new File('server/src/main/resources/' + customProperties)
		if (!file.exists()) {
			logger.warn('Custom properties did not exists, empty file created.')
			file.createNewFile()
		}
	}
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { stableKeyword -> version.toUpperCase().contains(stableKeyword) }
	if (stableKeyword) {
		return false
	}
	def unstableKeyword = ['-RC', '.CR', '-M', 'BETA'].any { unstableKeyword -> version.toUpperCase().contains(unstableKeyword) }
	return unstableKeyword
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}
}

nexusPublishing {
	repositories {
		sonatype {
			stagingProfileId = "6bc753ca200e26"
			username = project.findProperty("ossrhUsername") as String
			password = project.findProperty("ossrhPassword") as String
		}
	}
}

class CleanMetamodel extends DefaultTask {

	@TaskAction
	def cleanMetamodel() {
		def dir = new File('./model/src/main/generated/')
		dir.eachFileRecurse (FileType.FILES) { file ->
			if (file.name.endsWith("_.java")) {
				file.delete()
			}
		}
	}
}

apply from: 'testing.gradle'

group 'com.cezarykluczynski.stapi'
version '0.1.1-SNAPSHOT'

sourceCompatibility = 17
targetCompatibility = 17
