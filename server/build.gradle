import groovy.io.FileType

plugins {
	id 'net.ltgt.apt' version '0.8'
}

apply plugin: 'spring-boot'
apply plugin: 'war'

springBoot {
	mainClass = "com.cezarykluczynski.stapi.server.Application"
}

dependencies {
	compile project(':model'), project(':util'), project(':sources'), project(':etl'), project(':client')
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: springBootVersion
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version: springBootVersion
	compile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'
	compile group: 'com.oracle', name: 'ojdbc6', version: '11.2.0.4.0-atlassian-hosted'

	// CXF
	compile group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxws', version: '3.1.7'
	compile group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxrs', version: '3.1.7'
	compile group: 'org.apache.cxf', name: 'cxf-rt-rs-security-cors', version: '3.1.7'
	compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.8.3'
	compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.8.3'

	// Utils
	compile group: 'joda-time', name: 'joda-time', version: '2.9.2'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
	compile 'org.mapstruct:mapstruct-jdk8:1.2.0.Beta2'
	apt 'org.mapstruct:mapstruct-processor:1.2.0.Beta2'
	compile 'org.zeroturnaround:zt-zip:1.11'

	// Other
	compile group: 'javax.servlet', name: 'jstl', version: '1.2'
	compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
	compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
	compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
	compile group: 'org.glassfish', name: 'javax.json', version: '1.0.4'

	testCompile project(':util').sourceSets.test.output
}

apply from: 'codeGen.gradle'

configurations.compile.exclude group: 'io.swagger'

task copyDocs(type: CopyDocs) << {}

task npmBuild(type:Exec) {
	workingDir 'src/main/web'
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'npm', 'run', 'install-build'
	} else {
		commandLine 'npm', 'run', 'install-build'
	}
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toString()
	}
	// see: https://github.com/gradle/gradle/issues/882#issuecomment-269849435
	doLast {
		println()
	}
}

class CopyDocs extends DefaultTask {

	@TaskAction
	def copy() {
		def dir = new File('./contract/src/main/resources/v1/')
		dir.eachFileRecurse (FileType.FILES) { file ->
			File destination = new File('./server/build/resources/main/' + file.getPath())
			destination.parentFile.mkdirs()
			destination.createNewFile()
			destination.write(file.text)
		}
	}
}

war {
	archiveName = 'stapi.war'
	dependsOn(copyDocs, npmBuild)
}
