import java.nio.file.Files

plugins {
	id 'io.freefair.lombok'
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'org.hidetake.swagger.generator' version '2.19.2'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	implementation project(':contract')
	implementation group: 'com.squareup.okhttp', name: 'okhttp', version: '2.7.5'
	implementation group: 'com.squareup.okhttp', name: 'logging-interceptor', version: '2.7.5'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.5.17'
	swaggerCodegen group: 'io.swagger', name: 'swagger-codegen-cli', version: '2.2.0'
	testImplementation project(':util').sourceSets.test.output
}

jar.archiveBaseName = 'stapi-client'

swaggerSources {
	stapi {
		inputFile = file('../contract/src/main/resources/v1/swagger/stapi.yaml')
		code {
			language = 'java'
			configFile = file('../contract/src/main/resources/v1/swagger/config.json')
			wipeOutputDir = false
			outputDir = file('.')
		}
	}
}

clean.doFirst {
	delete "${rootDir}/client/src/main/java/com/cezarykluczynski/stapi/client/v1/"
}

compileJava {
	dependsOn(swaggerSources.stapi.code)
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			group = 'com.cezarykluczynski.stapi'
			artifactId = 'stapi-client'
			version = '0.1.1-SNAPSHOT'
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = 'STAPI Client'
				description = 'Official client library for STAPI, a Star Trek API'
				url = 'https://stapi.co/'
				packaging = 'jar'
				licenses {
					license {
						name = 'MIT'
						url = 'https://opensource.org/licenses/MIT'
					}
				}
				developers {
					developer {
						id = 'cezary.kluczynski'
						name = 'Cezary Kluczy≈Ñski'
						email = 'cezary.kluczynski@gmail.com'
					}
				}
				scm {
					connection = 'https://github.com/cezarykluczynski/stapi.git'
					developerConnection = 'git@github.com:cezarykluczynski/stapi.git'
					url = 'https://github.com/cezarykluczynski/stapi'
				}
				withXml {
					Node pomNode = asNode()
					Node dependencies = ((NodeList) pomNode.get("dependencies")).first()
					List<Node> children = dependencies.children()
					for (int i = children.size() - 1; i >= 0; i--) {
						Node childNode = (Node) children.get(i)
						List<Node> dependencyList = childNode.children()
						boolean doDelete = true
						for (int j = 0; j < dependencyList.size(); j++) {
							Node subChild = (Node) dependencyList.get(j)
							String subChildName = (String) subChild.name()
							if (subChildName.endsWith('artifactId')) {
								String value = (String) subChild.value()
								if (value.contains('okhttp') && !value.contains('logging-interceptor') || value.contains('gson')) {
									doDelete = false
								}
							}
						}

						if (doDelete) {
							dependencies.remove(childNode)
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			url version.endsWith('SNAPSHOT')
					? "https://oss.sonatype.org/content/repositories/snapshots/"
					: "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials {
				username(project.findProperty("ossrhUsername") as String)
				password(project.findProperty("ossrhPassword") as String)
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}

javadoc {
	failOnError(false)
	options.addStringOption('Xdoclint:none', '-quiet')
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}
